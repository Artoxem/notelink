import 'package:flutter/foundation.dart';
import 'package:uuid/uuid.dart';
import '../models/note.dart';
import '../services/database_service.dart';

class NotesProvider with ChangeNotifier {
  final DatabaseService _databaseService = DatabaseService();
  List<Note> _notes = [];
  bool _isLoading = false;

  List<Note> get notes => _notes;
  bool get isLoading => _isLoading;

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫
  List<Note> getFavoriteNotes() {
    return _notes.where((note) => note.isFavorite).toList();
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  Future<void> toggleFavorite(String id) async {
    print('üìå toggleFavorite –Ω–∞—á–∞–ª–æ: id=$id');

    final index = _notes.indexWhere((n) => n.id == id);
    if (index != -1) {
      final note = _notes[index];
      final currentIsFavorite = note.isFavorite;
      print('üìå –ù–∞–π–¥–µ–Ω–∞ –∑–∞–º–µ—Ç–∫–∞: ${note.id}, isFavorite=$currentIsFavorite');

      final updatedNote = note.copyWith(
        isFavorite: !currentIsFavorite,
        updatedAt: DateTime.now(),
      );

      print('üìå –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞: isFavorite=${updatedNote.isFavorite}');

      try {
        await _databaseService.updateNote(updatedNote);
        print('üìå –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ë–î');

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
        _notes[index] = updatedNote;

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–º–µ—Ç–∫—É, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        await loadNotes();

        // –°–Ω–æ–≤–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
        final refreshedIndex = _notes.indexWhere((n) => n.id == id);
        if (refreshedIndex != -1) {
          print(
              'üìå –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: isFavorite=${_notes[refreshedIndex].isFavorite}');
        } else {
          print('üìå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏');
        }

        notifyListeners();
      } catch (e) {
        print('üìå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: $e');
        print(StackTrace.current);
      }
    } else {
      print('üìå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: id=$id');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏
  Future<void> loadNotes() async {
    _isLoading = true;
    notifyListeners();

    print('–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–º–µ—Ç–æ–∫...');
    try {
      _notes = await _databaseService.getNotes();
      print('–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${_notes.length} –∑–∞–º–µ—Ç–æ–∫');
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–º–µ—Ç–æ–∫: $e');
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º
  List<Note> getDeadlineNotes() {
    return _notes.where((note) => note.hasDeadline).toList();
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ –¥–∞—Ç–µ
  List<Note> getDateLinkedNotes() {
    return _notes.where((note) => note.hasDateLink).toList();
  }

  // –ü–æ–ª—É—á–∏—Ç—å –±—ã—Å—Ç—Ä—ã–µ –∑–∞–º–µ—Ç–∫–∏
  List<Note> getQuickNotes() {
    return _notes.where((note) => note.isQuickNote).toList();
  }

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
  Future<Note> createNote({
    required String content,
    List<String>? themeIds,
    bool hasDeadline = false,
    DateTime? deadlineDate,
    bool hasDateLink = false,
    DateTime? linkedDate,
    List<String>? mediaUrls,
    String? emoji,
    List<DateTime>? reminderDates,
    String? reminderSound,
  }) async {
    print(
        'üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏: ${content.substring(0, content.length > 30 ? 30 : content.length)}...');
    try {
      final note = Note(
        id: const Uuid().v4(),
        content: content,
        themeIds: themeIds ?? [],
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
        hasDeadline: hasDeadline,
        deadlineDate: deadlineDate,
        hasDateLink: hasDateLink,
        linkedDate: linkedDate,
        isCompleted: false,
        isFavorite: false,
        mediaUrls: mediaUrls ?? [],
        emoji: emoji,
        reminderDates: reminderDates,
        reminderSound: reminderSound,
      );

      print('üìù –í—Å—Ç–∞–≤–∫–∞ –∑–∞–º–µ—Ç–∫–∏ –≤ –ë–î: ${note.id}');
      await _databaseService.insertNote(note);
      _notes.add(note);
      print('‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫: ${note.id}');
      notifyListeners();
      return note;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: $e');
      // –ü–æ–ª—É—á–∏–º —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –æ—Ç–ª–∞–¥–∫–∏
      print(StackTrace.current);
      throw e;
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–º–µ—Ç–∫—É
  Future<void> updateNote(Note note) async {
    try {
      await _databaseService
          .updateNote(note.copyWith(updatedAt: DateTime.now()));
      final index = _notes.indexWhere((n) => n.id == note.id);
      if (index != -1) {
        _notes[index] = note.copyWith(updatedAt: DateTime.now());
        notifyListeners();
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: $e');
    }
  }

  // –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
  Future<void> completeNote(String id) async {
    final index = _notes.indexWhere((n) => n.id == id);
    if (index != -1) {
      final note = _notes[index].copyWith(
        isCompleted: true,
        updatedAt: DateTime.now(),
      );
      await updateNote(note);
    }
  }

  // –ü—Ä–æ–¥–ª–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏
  Future<void> extendDeadline(String id, DateTime newDeadline) async {
    final index = _notes.indexWhere((n) => n.id == id);
    if (index != -1) {
      final note = _notes[index];
      if (!note.hasDeadline) return;

      final originalDeadline = note.deadlineDate!;
      final extension = DeadlineExtension(
        originalDate: originalDeadline,
        newDate: newDeadline,
        extendedAt: DateTime.now(),
      );

      final extensions = note.deadlineExtensions ?? [];
      extensions.add(extension);

      final updatedNote = note.copyWith(
        deadlineDate: newDeadline,
        deadlineExtensions: extensions,
        updatedAt: DateTime.now(),
      );

      await updateNote(updatedNote);
    }
  }

  // –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
  Future<void> deleteNote(String id) async {
    try {
      await _databaseService.deleteNote(id);
      _notes.removeWhere((n) => n.id == id);
      notifyListeners();
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: $e');
    }
  }
}
