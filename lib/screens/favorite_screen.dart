import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../models/note.dart';
import '../models/theme.dart';
import '../providers/notes_provider.dart';
import '../providers/themes_provider.dart';
import '../utils/constants.dart';
import 'note_detail_screen.dart';
import 'package:intl/intl.dart';

class FavoriteScreen extends StatefulWidget {
  const FavoriteScreen({super.key});

  @override
  State<FavoriteScreen> createState() => _FavoriteScreenState();
}

class _FavoriteScreenState extends State<FavoriteScreen> {
  bool _isInitialized = false;

  @override
  void initState() {
    super.initState();
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫—Ä–∞–Ω–∞
    _loadData();
  }

  Future<void> _loadData() async {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    final notesProvider = Provider.of<NotesProvider>(context, listen: false);

    // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å
    setState(() {
      _isInitialized = false;
    });

    try {
      await notesProvider.loadNotes();
      print('üìå FavoriteScreen: –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

      // –ü–æ–ª—É—á–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      final favorites = notesProvider.getFavoriteNotes();
      print(
          'üìå FavoriteScreen._loadData: –Ω–∞–π–¥–µ–Ω–æ ${favorites.length} –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫');
    } catch (e) {
      print('üìå FavoriteScreen: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–º–µ—Ç–æ–∫: $e');
    } finally {
      // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
      if (mounted) {
        setState(() {
          _isInitialized = true;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('–ò–∑–±—Ä–∞–Ω–Ω–æ–µ'),
        actions: [
          // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä—É—á–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: _loadData,
            tooltip: '–û–±–Ω–æ–≤–∏—Ç—å',
          ),
        ],
      ),
      body: !_isInitialized
          ? const Center(
              child:
                  CircularProgressIndicator()) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
          : Consumer<NotesProvider>(
              builder: (context, notesProvider, _) {
                // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫
                final favoriteNotes = notesProvider.getFavoriteNotes();
                print(
                    'üìå FavoriteScreen.build: ${favoriteNotes.length} –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫');

                // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if (favoriteNotes.isEmpty) {
                  return Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      mainAxisSize: MainAxisSize.min, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º Column
                      children: [
                        Icon(Icons.star_border,
                            size: 80, color: Colors.amber.withOpacity(0.7)),
                        const SizedBox(height: 16),
                        const Text(
                          '–ù–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫',
                          style: TextStyle(
                              fontSize: 24, fontWeight: FontWeight.bold),
                        ),
                        const SizedBox(height: 8),
                        const Text(
                          '–°–≤–∞–π–ø–Ω–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –≤–ø—Ä–∞–≤–æ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ,\n—á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ',
                          style: TextStyle(fontSize: 16),
                          textAlign: TextAlign.center,
                        ),
                      ],
                    ),
                  );
                }

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫
                return ListView.builder(
                  padding: const EdgeInsets.all(16),
                  itemCount: favoriteNotes.length,
                  itemBuilder: (context, index) {
                    final note = favoriteNotes[index];
                    return _buildFavoriteCard(note, notesProvider);
                  },
                );
              },
            ),
    );
  }

  // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏
  Widget _buildFavoriteCard(Note note, NotesProvider notesProvider) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏ —Ç–µ–º—ã
    Color indicatorColor = _getNoteStatusColor(note);

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–º—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç —Ç–µ–º—ã
    if (note.themeIds.isNotEmpty) {
      final themesProvider =
          Provider.of<ThemesProvider>(context, listen: false);
      final themeId = note.themeIds.first;

      try {
        final theme = themesProvider.themes.firstWhere(
          (t) => t.id == themeId,
          orElse: () => NoteTheme(
            id: '',
            name: '–ë–µ–∑ —Ç–µ–º—ã',
            color: AppColors.secondary.value.toString(),
            createdAt: DateTime.now(),
            updatedAt: DateTime.now(),
            noteIds: [],
          ),
        );

        if (theme.id.isNotEmpty) {
          try {
            indicatorColor = Color(int.parse(theme.color));
          } catch (e) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ü–≤–µ—Ç, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
          }
        }
      } catch (e) {
        print('üìå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–º—ã: $e');
      }
    }

    return Card(
      margin: const EdgeInsets.only(bottom: 16),
      elevation: 3,
      color: AppColors.cardBackground,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: InkWell(
        onTap: () => _viewNoteDetails(note),
        borderRadius: BorderRadius.circular(12),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // –¶–≤–µ—Ç–Ω–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–ª–µ–≤–∞
            Container(
              width: 6,
              height: null, // NULL! –ü–æ–∑–≤–æ–ª–∏—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É –ø—Ä–∏–Ω—è—Ç—å –≤—ã—Å–æ—Ç—É —Ä–æ–¥–∏—Ç–µ–ª—è
              decoration: BoxDecoration(
                color: indicatorColor,
                borderRadius: const BorderRadius.only(
                  topLeft: Radius.circular(12),
                  bottomLeft: Radius.circular(12),
                ),
              ),
            ),

            // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            Expanded(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  mainAxisSize: MainAxisSize.min, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É Column
                  children: [
                    // –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å —Å –¥–∞—Ç–æ–π –∏ –∏–∫–æ–Ω–∫–æ–π –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text(
                          DateFormat('d MMMM yyyy').format(note.createdAt),
                          style: AppTextStyles.bodySmallLight,
                        ),
                        Row(
                          mainAxisSize: MainAxisSize.min, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º Row
                          children: [
                            const Icon(
                              Icons.star,
                              color: Colors.amber,
                              size: 20,
                            ),
                            // –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
                            IconButton(
                              icon: const Icon(Icons.close,
                                  size: 16, color: AppColors.textOnLight),
                              onPressed: () {
                                print('üìå –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: ${note.id}');
                                notesProvider.toggleFavorite(note.id);

                                ScaffoldMessenger.of(context).showSnackBar(
                                  const SnackBar(
                                    content:
                                        Text('–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ'),
                                    duration: Duration(seconds: 2),
                                  ),
                                );
                              },
                            ),
                          ],
                        ),
                      ],
                    ),

                    // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏
                    Padding(
                      padding: const EdgeInsets.symmetric(vertical: 12.0),
                      child: Text(
                        note.content,
                        maxLines: 4,
                        overflow: TextOverflow.ellipsis,
                        style: AppTextStyles.bodyMediumLight,
                      ),
                    ),

                    // –î–µ–¥–ª–∞–π–Ω (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    if (note.hasDeadline && note.deadlineDate != null)
                      Container(
                        padding: const EdgeInsets.symmetric(
                          horizontal: 8,
                          vertical: 4,
                        ),
                        decoration: BoxDecoration(
                          color: note.isCompleted
                              ? AppColors.deadlineBgGray
                              : AppColors.deadlineBgGreen,
                          borderRadius: BorderRadius.circular(4),
                        ),
                        child: Text(
                          note.isCompleted
                              ? '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'
                              : '–¥–æ ${DateFormat('d MMM').format(note.deadlineDate!)}',
                          style: AppTextStyles.deadlineText,
                        ),
                      ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∑–∞–º–µ—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞
  Color _getNoteStatusColor(Note note) {
    if (note.isCompleted) {
      return AppColors.completed;
    }

    if (!note.hasDeadline || note.deadlineDate == null) {
      return AppColors.secondary; // –û–±—ã—á–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ –±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞
    }

    final now = DateTime.now();
    final daysUntilDeadline = note.deadlineDate!.difference(now).inDays;

    if (daysUntilDeadline < 0) {
      return AppColors.deadlineUrgent; // –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ
    } else if (daysUntilDeadline <= 2) {
      return AppColors.deadlineUrgent; // –°—Ä–æ—á–Ω–æ (–∫—Ä–∞—Å–Ω—ã–π)
    } else if (daysUntilDeadline <= 7) {
      return AppColors.deadlineNear; // –°–∫–æ—Ä–æ (–æ—Ä–∞–Ω–∂–µ–≤—ã–π)
    } else {
      return AppColors.deadlineFar; // –ù–µ —Å—Ä–æ—á–Ω–æ (–∂–µ–ª—Ç—ã–π)
    }
  }

  void _viewNoteDetails(Note note) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => NoteDetailScreen(note: note),
      ),
    ).then((_) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å —ç–∫—Ä–∞–Ω–∞ –¥–µ—Ç–∞–ª–µ–π
      _loadData();
    });
  }
}
