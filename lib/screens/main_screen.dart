import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:flutter/services.dart';
import '../providers/app_provider.dart';
import '../utils/constants.dart';
import 'notes_screen.dart';
import 'calendar_screen.dart';
import 'themes_screen.dart';
import 'search_screen.dart';
import 'note_detail_screen.dart';
import 'favorite_screen.dart';
import 'dart:math' as math;

class MainScreen extends StatefulWidget {
  const MainScreen({super.key});

  @override
  State<MainScreen> createState() => _MainScreenState();
}

class _MainScreenState extends State<MainScreen> with TickerProviderStateMixin {
  // –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ 2 (—ç–∫—Ä–∞–Ω —Å —Ç–µ–º–∞–º–∏)
  int _currentIndex = 2;
  late AnimationController _fabAnimationController;
  late Animation<double> _fabScaleAnimation;
  late Animation<double> _fabRotateAnimation;

  final List<Widget> _screens = [
    const NotesScreen(),
    const CalendarScreen(),
    const ThemesScreen(),
  ];

  final List<String> _titles = [
    '–ó–∞–º–µ—Ç–∫–∏',
    '–ö–∞–ª–µ–Ω–¥–∞—Ä—å',
    '–¢–µ–º—ã',
  ];

  @override
  void initState() {
    super.initState();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è FAB
    _fabAnimationController = AnimationController(
      vsync: this,
      duration: AppAnimations.mediumDuration,
    );

    _fabScaleAnimation = Tween<double>(begin: 1.0, end: 1.1).animate(
      CurvedAnimation(
        parent: _fabAnimationController,
        curve: Curves.easeOut,
      ),
    );

    _fabRotateAnimation = Tween<double>(begin: 0.0, end: math.pi / 12).animate(
      CurvedAnimation(
        parent: _fabAnimationController,
        curve: Curves.easeOut,
      ),
    );
  }

  @override
  void dispose() {
    _fabAnimationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(_titles[_currentIndex]),
        actions: [
          // –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
          IconButton(
            icon: const Icon(AppIcons.search),
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => const SearchScreen(),
                ),
              );
            },
          ),

          // –ö–Ω–æ–ø–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
          IconButton(
            icon: const Icon(Icons.star),
            tooltip: '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ',
            onPressed: () {
              print('üìå –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ');
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => const FavoriteScreen(),
                ),
              );
            },
          ),

          // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –∑–∞–º–µ—Ç–æ–∫
          if (_currentIndex == 0)
            Consumer<AppProvider>(
              builder: (context, appProvider, _) {
                return IconButton(
                  icon: Icon(
                    appProvider.noteViewMode == NoteViewMode.card
                        ? AppIcons.list
                        : AppIcons.grid,
                  ),
                  tooltip: appProvider.noteViewMode == NoteViewMode.card
                      ? '–°–ø–∏—Å–æ–∫'
                      : '–ö–∞—Ä—Ç–æ—á–∫–∏',
                  onPressed: () {
                    Provider.of<AppProvider>(context, listen: false)
                        .toggleNoteViewMode();
                  },
                );
              },
            ),
        ],
      ),
      body: IndexedStack(
        key: const ValueKey('main_screen_stack'),
        index: _currentIndex,
        children: _screens,
      ),
      bottomNavigationBar: Container(
        decoration: BoxDecoration(
          boxShadow: [AppShadows.medium],
          borderRadius: const BorderRadius.only(
            topLeft: Radius.circular(16),
            topRight: Radius.circular(16),
          ),
        ),
        child: ClipRRect(
          borderRadius: const BorderRadius.only(
            topLeft: Radius.circular(16),
            topRight: Radius.circular(16),
          ),
          child: BottomNavigationBar(
            currentIndex: _currentIndex,
            onTap: (index) {
              // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ index –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
              if (_currentIndex != index) {
                setState(() {
                  _currentIndex = index;
                });
              }
            },
            type: BottomNavigationBarType.fixed,
            items: const [
              BottomNavigationBarItem(
                icon: Icon(Icons.note),
                label: '–ó–∞–º–µ—Ç–∫–∏',
              ),
              BottomNavigationBarItem(
                icon: Icon(AppIcons.calendar),
                label: '–ö–∞–ª–µ–Ω–¥–∞—Ä—å',
              ),
              BottomNavigationBarItem(
                icon: Icon(AppIcons.themes),
                label: '–¢–µ–º—ã',
              ),
            ],
          ),
        ),
      ),

      floatingActionButton: _currentIndex != 1
          ? MouseRegion(
              onEnter: (_) => _fabAnimationController.forward(),
              onExit: (_) => _fabAnimationController.reverse(),
              child: GestureDetector(
                onTapDown: (_) => _fabAnimationController.forward(),
                onTapUp: (_) => _fabAnimationController.reverse(),
                onTapCancel: () => _fabAnimationController.reverse(),
                child: AnimatedBuilder(
                  animation: _fabAnimationController,
                  builder: (context, child) {
                    return Transform.scale(
                      scale: _fabScaleAnimation.value,
                      child: Transform.rotate(
                        angle: _fabRotateAnimation.value,
                        child: FloatingActionButton(
                          onPressed: () {
                            switch (_currentIndex) {
                              case 0: // Notes
                                _showAddNoteDialog();
                                break;
                              case 2: // Themes
                                _showAddThemeDialog();
                                break;
                            }
                          },
                          backgroundColor: AppColors.accentSecondary,
                          foregroundColor: AppColors.textOnDark,
                          elevation: 4,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(16),
                          ),
                          child: const Icon(Icons.add, size: 28),
                        ),
                      ),
                    );
                  },
                ),
              ),
            )
          : null, // null –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è,
    );
  }

  void _showAddNoteDialog() {
    Navigator.push(
      context,
      PageRouteBuilder(
        pageBuilder: (context, animation, secondaryAnimation) =>
            const NoteDetailScreen(),
        transitionsBuilder: (context, animation, secondaryAnimation, child) {
          var begin = const Offset(0.0, 1.0);
          var end = Offset.zero;
          var curve = Curves.easeOutQuint;

          var tween = Tween(begin: begin, end: end).chain(
            CurveTween(curve: curve),
          );

          return SlideTransition(
            position: animation.drive(tween),
            child: child,
          );
        },
        transitionDuration: AppAnimations.mediumDuration,
      ),
    );
  }

  void _showAddThemeDialog() {
    ThemesScreen.showAddThemeDialog(context);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
  void _handleFavoriteToggle(Note note) async {
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É mounted –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if (!mounted) return;

    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∑–∞–º–µ—Ç–æ–∫
      final notesProvider = Provider.of<NotesProvider>(context, listen: false);

      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
      await notesProvider.toggleFavorite(note.id);

      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
      final updatedNote = notesProvider.notes.firstWhere(
        (n) => n.id == note.id,
        orElse: () => note,
      );

      // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
      HapticFeedback.lightImpact();

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(updatedNote.isFavorite
                ? '–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'
                : '–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ'),
            duration: const Duration(seconds: 2),
          ),
        );
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º UI –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      if (mounted) {
        setState(() {
          // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω
        });
      }
    } catch (e) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('–û—à–∏–±–∫–∞: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }
}
