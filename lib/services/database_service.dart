import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';
import 'dart:async';
import '../models/note.dart';
import 'dart:convert';
import '../models/theme.dart';

class DatabaseService {
  static final DatabaseService _instance = DatabaseService._internal();
  factory DatabaseService() => _instance;

  DatabaseService._internal();

  static Database? _database;

  Future<Database> get database async {
    if (_database != null) return _database!;

    _database = await _initDatabase();
    return _database!;
  }

  Future<Database> _initDatabase() async {
    final path = join(await getDatabasesPath(), 'note_link.db');
    print('–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: $path');

    // ‚ö†Ô∏è–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –ë–î –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏‚ö†Ô∏è
    //print('‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏');
    // await deleteDatabase(path);
    //print('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞');

    return await openDatabase(
      path,
      version: 1,
      onCreate: _createDatabase,
      onOpen: (db) async {
        // –í—ã–≤–µ–¥–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
        final tables = await db
            .rawQuery("SELECT name FROM sqlite_master WHERE type='table'");
        print(
            'üìã –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${tables.map((t) => t['name']).join(', ')}');

        // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã notes
        final notesColumns = await db.rawQuery('PRAGMA table_info(notes)');
        print(
            'üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã notes: ${notesColumns.map((c) => c['name']).join(', ')}');

        // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã themes
        final themesColumns = await db.rawQuery('PRAGMA table_info(themes)');
        print(
            'üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã themes: ${themesColumns.map((c) => c['name']).join(', ')}');
      },
    );
  }

  Future<void> _createDatabase(Database db, int version) async {
    print('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

    // –í–ê–ñ–ù–û: –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–µ–π –∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º SQL
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∑–∞–º–µ—Ç–æ–∫
    await db.execute('''
  CREATE TABLE notes(
    id TEXT PRIMARY KEY,
    content TEXT NOT NULL,
    createdAt INTEGER NOT NULL,
    updatedAt INTEGER NOT NULL,
    hasDeadline INTEGER NOT NULL,
    deadlineDate INTEGER,
    hasDateLink INTEGER NOT NULL,
    linkedDate INTEGER,
    isCompleted INTEGER NOT NULL,
    isFavorite INTEGER NOT NULL,
    mediaUrls TEXT NOT NULL,
    emoji TEXT,
    reminderDates TEXT,
    reminderSound TEXT,
    deadlineExtensions TEXT
  )
  ''');
    print('‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ notes');

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–µ–º
    await db.execute('''
  CREATE TABLE themes(
    id TEXT PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT,
    color TEXT NOT NULL,
    createdAt INTEGER NOT NULL,
    updatedAt INTEGER NOT NULL
  )
  ''');
    print('‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ themes');

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å–≤—è–∑–µ–π –∑–∞–º–µ—Ç–æ–∫ —Å —Ç–µ–º–∞–º–∏
    await db.execute('''
  CREATE TABLE note_theme(
    noteId TEXT,
    themeId TEXT,
    PRIMARY KEY (noteId, themeId),
    FOREIGN KEY (noteId) REFERENCES notes(id) ON DELETE CASCADE,
    FOREIGN KEY (themeId) REFERENCES themes(id) ON DELETE CASCADE
  )
  ''');
    print('‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ note_theme');
   
    // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞
    await db.execute('''
  CREATE TABLE search_history(
    id TEXT PRIMARY KEY,
    query TEXT NOT NULL,
    createdAt INTEGER NOT NULL
  )
  ''');
    print('‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ search_history');
  }

  // CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è Note
  Future<String> insertNote(Note note) async {
    final db = await database;
    print('üíæ –í—Å—Ç–∞–≤–∫–∞ –∑–∞–º–µ—Ç–∫–∏ –≤ –ë–î: ${note.id}');

    try {
      await db.insert('notes', {
        'id': note.id,
        'content': note.content,
        'createdAt': note.createdAt.millisecondsSinceEpoch,
        'updatedAt': note.updatedAt.millisecondsSinceEpoch,
        'hasDeadline': note.hasDeadline ? 1 : 0,
        'deadlineDate': note.deadlineDate?.millisecondsSinceEpoch,
        'hasDateLink': note.hasDateLink ? 1 : 0,
        'linkedDate': note.linkedDate?.millisecondsSinceEpoch,
        'isCompleted': note.isCompleted ? 1 : 0,
        'isFavorite': note.isFavorite ? 1 : 0,
        'mediaUrls': json.encode(note.mediaUrls),
        'emoji': note.emoji,
        'reminderDates': note.reminderDates != null
            ? json.encode(note.reminderDates!
                .map((x) => x.millisecondsSinceEpoch)
                .toList())
            : null,
        'reminderSound': note.reminderSound,
        'deadlineExtensions': note.deadlineExtensions != null
            ? json
                .encode(note.deadlineExtensions!.map((x) => x.toMap()).toList())
            : null,
      });

      print('‚úÖ SQL: –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –ë–î');

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏ —Å —Ç–µ–º–∞–º–∏
      for (final themeId in note.themeIds) {
        await db.insert('note_theme', {
          'noteId': note.id,
          'themeId': themeId,
        });
      }

      return note.id;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –∑–∞–º–µ—Ç–∫–∏ –≤ –ë–î: $e');
      throw e;
    }
  }

  Future<List<Note>> getNotes() async {
    final db = await database;
    final List<Map<String, dynamic>> maps = await db.query('notes');

    return Future.wait(maps.map((map) async {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—ã –¥–ª—è –∑–∞–º–µ—Ç–∫–∏
      final themeIds = await getThemeIdsForNote(map['id'] as String);

      return Note(
        id: map['id'] as String,
        content: map['content'] as String,
        themeIds: themeIds,
        createdAt: DateTime.fromMillisecondsSinceEpoch(map['createdAt'] as int),
        updatedAt: DateTime.fromMillisecondsSinceEpoch(map['updatedAt'] as int),
        hasDeadline: (map['hasDeadline'] as int) == 1,
        deadlineDate: map['deadlineDate'] != null
            ? DateTime.fromMillisecondsSinceEpoch(map['deadlineDate'] as int)
            : null,
        hasDateLink: (map['hasDateLink'] as int) == 1,
        linkedDate: map['linkedDate'] != null
            ? DateTime.fromMillisecondsSinceEpoch(map['linkedDate'] as int)
            : null,
        isCompleted: (map['isCompleted'] as int) == 1,
        isFavorite: (map['isFavorite'] as int) ==
            1, // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–ª–∞–≥–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!
        mediaUrls: List<String>.from(json.decode(map['mediaUrls'] as String)),
        emoji: map['emoji'] as String?,
        reminderDates: map['reminderDates'] != null
            ? List<DateTime>.from(
                (json.decode(map['reminderDates'] as String) as List)
                    .map((x) => DateTime.fromMillisecondsSinceEpoch(x as int)))
            : null,
        reminderSound: map['reminderSound'] as String?,
        deadlineExtensions: map['deadlineExtensions'] != null
            ? List<DeadlineExtension>.from(
                (json.decode(map['deadlineExtensions'] as String) as List).map(
                    (x) => DeadlineExtension.fromMap(
                        Map<String, dynamic>.from(x as Map))))
            : null,
      );
    }).toList());
  }

  Future<Note?> getNote(String id) async {
    final db = await database;
    print(
        'üìä SELECT * FROM notes WHERE id = $id'); // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞

    final List<Map<String, dynamic>> maps = await db.query(
      'notes',
      where: 'id = ?',
      whereArgs: [id],
    );

    if (maps.isEmpty) return null;

    final map = maps.first;
    // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –ø–æ–ª—è –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print('üìä –î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î: ${map.toString()}');

    final themeIds = await getThemeIdsForNote(id);

    return Note(
      id: map['id'] as String,
      content: map['content'] as String,
      themeIds: themeIds,
      createdAt: DateTime.fromMillisecondsSinceEpoch(map['createdAt'] as int),
      updatedAt: DateTime.fromMillisecondsSinceEpoch(map['updatedAt'] as int),
      hasDeadline: (map['hasDeadline'] as int) == 1,
      deadlineDate: map['deadlineDate'] != null
          ? DateTime.fromMillisecondsSinceEpoch(map['deadlineDate'] as int)
          : null,
      hasDateLink: (map['hasDateLink'] as int) == 1,
      linkedDate: map['linkedDate'] != null
          ? DateTime.fromMillisecondsSinceEpoch(map['linkedDate'] as int)
          : null,
      isCompleted: (map['isCompleted'] as int) == 1,
      isFavorite:
          (map['isFavorite'] as int) == 1, // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
      mediaUrls: List<String>.from(json.decode(map['mediaUrls'] as String)),
      emoji: map['emoji'] as String?,
      reminderDates: map['reminderDates'] != null
          ? List<DateTime>.from(
              (json.decode(map['reminderDates'] as String) as List)
                  .map((x) => DateTime.fromMillisecondsSinceEpoch(x as int)))
          : null,
      reminderSound: map['reminderSound'] as String?,
      deadlineExtensions: map['deadlineExtensions'] != null
          ? List<DeadlineExtension>.from(
              (json.decode(map['deadlineExtensions'] as String) as List).map(
                  (x) => DeadlineExtension.fromMap(
                      Map<String, dynamic>.from(x as Map))))
          : null,
    );
  }

  Future<List<String>> getThemeIdsForNote(String noteId) async {
    final db = await database;
    final List<Map<String, dynamic>> maps = await db.query(
      'note_theme',
      columns: ['themeId'],
      where: 'noteId = ?',
      whereArgs: [noteId],
    );

    return List.generate(maps.length, (i) => maps[i]['themeId'] as String);
  }

  Future<int> updateNote(Note note) async {
    final db = await database;
    print('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –≤ –ë–î: ${note.id}');
    print('üìä isFavorite = ${note.isFavorite}');

    final updateMap = {
      'content': note.content,
      'updatedAt': note.updatedAt.millisecondsSinceEpoch,
      'hasDeadline': note.hasDeadline ? 1 : 0,
      'deadlineDate': note.deadlineDate?.millisecondsSinceEpoch,
      'hasDateLink': note.hasDateLink ? 1 : 0,
      'linkedDate': note.linkedDate?.millisecondsSinceEpoch,
      'isCompleted': note.isCompleted ? 1 : 0,
      'isFavorite':
          note.isFavorite ? 1 : 0, // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ —ç—Ç–æ –ø–æ–ª–µ —Ç–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è
      'mediaUrls': json.encode(note.mediaUrls),
      'emoji': note.emoji,
      'reminderDates': note.reminderDates != null
          ? json.encode(
              note.reminderDates!.map((x) => x.millisecondsSinceEpoch).toList())
          : null,
      'reminderSound': note.reminderSound,
      'deadlineExtensions': note.deadlineExtensions != null
          ? json.encode(note.deadlineExtensions!.map((x) => x.toMap()).toList())
          : null,
    };

    print('üìä –ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: $updateMap');

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É
    final result = await db.update(
      'notes',
      updateMap,
      where: 'id = ?',
      whereArgs: [note.id],
    );

    print('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: $result —Å—Ç—Ä–æ–∫ –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ');

    // –°—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    final check = await db.query(
      'notes',
      where: 'id = ?',
      whereArgs: [note.id],
    );

    if (check.isNotEmpty) {
      print(
          'üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: isFavorite = ${check.first['isFavorite']}');
    }

    return result;
  }

  Future<int> deleteNote(String id) async {
    final db = await database;

    // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ —Å —Ç–µ–º–∞–º–∏ (–∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
    await db.delete(
      'note_theme',
      where: 'noteId = ?',
      whereArgs: [id],
    );

    // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∑–∞–º–µ—Ç–∫–∞–º–∏ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á —Å ON DELETE CASCADE,
    // —Ç–æ —ç—Ç–æ—Ç —à–∞–≥ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º)
    await db.delete(
      'note_links',
      where: 'sourceNoteId = ? OR targetNoteId = ?',
      whereArgs: [id, id],
    );

    // –£–¥–∞–ª—è–µ–º —Å–∞–º—É –∑–∞–º–µ—Ç–∫—É
    return await db.delete(
      'notes',
      where: 'id = ?',
      whereArgs: [id],
    );
  }

  // CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è Theme

  Future<String> insertTheme(NoteTheme theme) async {
    final db = await database;

    // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–º—É
    await db.insert('themes', {
      'id': theme.id,
      'name': theme.name,
      'description': theme.description,
      'color': theme.color,
      'createdAt': theme.createdAt.millisecondsSinceEpoch,
      'updatedAt': theme.updatedAt.millisecondsSinceEpoch,
    });

    // –í—Å—Ç–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏
    for (final noteId in theme.noteIds) {
      await db.insert('note_theme', {
        'noteId': noteId,
        'themeId': theme.id,
      });
    }

    return theme.id;
  }

  Future<List<NoteTheme>> getThemes() async {
    final db = await database;
    final List<Map<String, dynamic>> maps = await db.query('themes');

    return Future.wait(maps.map((map) async {
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Ç–µ–º—ã
      final noteIds = await getNoteIdsForTheme(map['id'] as String);

      return NoteTheme(
        id: map['id'] as String,
        name: map['name'] as String,
        description: map['description'] as String?,
        color: map['color'] as String,
        createdAt: DateTime.fromMillisecondsSinceEpoch(map['createdAt'] as int),
        updatedAt: DateTime.fromMillisecondsSinceEpoch(map['updatedAt'] as int),
        noteIds: noteIds,
      );
    }).toList());
  }

  Future<NoteTheme?> getTheme(String id) async {
    final db = await database;
    final List<Map<String, dynamic>> maps = await db.query(
      'themes',
      where: 'id = ?',
      whereArgs: [id],
    );

    if (maps.isEmpty) return null;

    final map = maps.first;
    final noteIds = await getNoteIdsForTheme(id);

    return NoteTheme(
      id: map['id'] as String,
      name: map['name'] as String,
      description: map['description'] as String?,
      color: map['color'] as String,
      createdAt: DateTime.fromMillisecondsSinceEpoch(map['createdAt'] as int),
      updatedAt: DateTime.fromMillisecondsSinceEpoch(map['updatedAt'] as int),
      noteIds: noteIds,
    );
  }

  Future<List<String>> getNoteIdsForTheme(String themeId) async {
    final db = await database;
    final List<Map<String, dynamic>> maps = await db.query(
      'note_theme',
      columns: ['noteId'],
      where: 'themeId = ?',
      whereArgs: [themeId],
    );

    return List.generate(maps.length, (i) => maps[i]['noteId'] as String);
  }

  Future<int> updateTheme(NoteTheme theme) async {
    final db = await database;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—É
    await db.update(
      'themes',
      {
        'name': theme.name,
        'description': theme.description,
        'color': theme.color,
        'updatedAt': theme.updatedAt.millisecondsSinceEpoch,
      },
      where: 'id = ?',
      whereArgs: [theme.id],
    );

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏
    await db.delete(
      'note_theme',
      where: 'themeId = ?',
      whereArgs: [theme.id],
    );

    // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–≤—è–∑–∏ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏
    for (final noteId in theme.noteIds) {
      await db.insert('note_theme', {
        'noteId': noteId,
        'themeId': theme.id,
      });
    }

    return 1;
  }

  Future<int> deleteTheme(String id) async {
    final db = await database;

    // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏
    await db.delete(
      'note_theme',
      where: 'themeId = ?',
      whereArgs: [id],
    );

    // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ note_links, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–æ–π —Ç–µ–º–æ–π
    await db.update(
      'note_links',
      {'themeId': null},
      where: 'themeId = ?',
      whereArgs: [id],
    );

    // –£–¥–∞–ª—è–µ–º —Å–∞–º—É —Ç–µ–º—É
    return await db.delete(
      'themes',
      where: 'id = ?',
      whereArgs: [id],
    );
  }

  Future<List<Note>> getNotesForTheme(String themeId) async {
    final db = await database;

    try {
      // –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–º–µ—Ç–æ–∫, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ç–µ–º–æ–π
      final List<Map<String, dynamic>> noteIds = await db.query(
        'note_theme',
        columns: ['noteId'],
        where: 'themeId = ?',
        whereArgs: [themeId],
      );

      if (noteIds.isEmpty) return [];

      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ IN
      final List<String> idList =
          noteIds.map((map) => map['noteId'] as String).toList();
      final List<String> placeholders = List.filled(idList.length, '?');

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–π –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏
      final List<Map<String, dynamic>> maps = await db.rawQuery(
        'SELECT * FROM notes WHERE id IN (${placeholders.join(', ')})',
        idList,
      );

      return Future.wait(maps.map((map) async {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—ã –¥–ª—è –∑–∞–º–µ—Ç–∫–∏
        final themeIds = await getThemeIdsForNote(map['id'] as String);

        return Note(
          id: map['id'] as String,
          content: map['content'] as String,
          themeIds: themeIds,
          createdAt:
              DateTime.fromMillisecondsSinceEpoch(map['createdAt'] as int),
          updatedAt:
              DateTime.fromMillisecondsSinceEpoch(map['updatedAt'] as int),
          hasDeadline: (map['hasDeadline'] as int) == 1,
          deadlineDate: map['deadlineDate'] != null
              ? DateTime.fromMillisecondsSinceEpoch(map['deadlineDate'] as int)
              : null,
          hasDateLink: (map['hasDateLink'] as int) == 1,
          linkedDate: map['linkedDate'] != null
              ? DateTime.fromMillisecondsSinceEpoch(map['linkedDate'] as int)
              : null,
          isCompleted: (map['isCompleted'] as int) == 1,
          isFavorite: (map['isFavorite'] as int) == 1,
          mediaUrls: List<String>.from(json.decode(map['mediaUrls'] as String)),
          emoji: map['emoji'] as String?,
          reminderDates: map['reminderDates'] != null
              ? List<DateTime>.from((json.decode(map['reminderDates'] as String)
                      as List)
                  .map((x) => DateTime.fromMillisecondsSinceEpoch(x as int)))
              : null,
          reminderSound: map['reminderSound'] as String?,
          deadlineExtensions: map['deadlineExtensions'] != null
              ? List<DeadlineExtension>.from(
                  (json.decode(map['deadlineExtensions'] as String) as List)
                      .map((x) => DeadlineExtension.fromMap(
                          Map<String, dynamic>.from(x as Map))))
              : null,
        );
      }).toList());
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —Ç–µ–º—ã: $e');
      print(StackTrace.current);
      return [];
    }
  }

    Future<int> deleteNoteLink(String id) async {
    final db = await database;

    return await db.delete(
      'note_links',
      where: 'id = ?',
      whereArgs: [id],
    );
  }

  Future<int> deleteNoteLinksByNoteId(String noteId) async {
    final db = await database;

    return await db.delete(
      'note_links',
      where: 'sourceNoteId = ? OR targetNoteId = ?',
      whereArgs: [noteId, noteId],
    );
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø–æ–∏—Å–∫–∞

  Future<void> insertSearchQuery(String id, String query) async {
    final db = await database;

    await db.insert('search_history', {
      'id': id,
      'query': query,
      'createdAt': DateTime.now().millisecondsSinceEpoch,
    });
  }

  Future<List<String>> getSearchHistory(int limit) async {
    final db = await database;
    final List<Map<String, dynamic>> maps = await db.query(
      'search_history',
      orderBy: 'createdAt DESC',
      limit: limit,
    );

    return List.generate(maps.length, (i) => maps[i]['query'] as String);
  }

  Future<void> clearSearchHistory() async {
    final db = await database;
    await db.delete('search_history');
  }

  Future<void> deleteSearchQuery(String query) async {
    final db = await database;
    await db.delete(
      'search_history',
      where: 'query = ?',
      whereArgs: [query],
    );
  }
}
